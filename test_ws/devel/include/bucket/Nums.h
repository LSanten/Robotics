// Generated by gencpp from file bucket/Nums.msg
// DO NOT EDIT!


#ifndef BUCKET_MESSAGE_NUMS_H
#define BUCKET_MESSAGE_NUMS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bucket
{
template <class ContainerAllocator>
struct Nums_
{
  typedef Nums_<ContainerAllocator> Type;

  Nums_()
    : num1(0)
    , num2(0)
    , num3(0)
    , num4(0)  {
    }
  Nums_(const ContainerAllocator& _alloc)
    : num1(0)
    , num2(0)
    , num3(0)
    , num4(0)  {
  (void)_alloc;
    }



   typedef uint32_t _num1_type;
  _num1_type num1;

   typedef uint32_t _num2_type;
  _num2_type num2;

   typedef uint32_t _num3_type;
  _num3_type num3;

   typedef uint32_t _num4_type;
  _num4_type num4;





  typedef boost::shared_ptr< ::bucket::Nums_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bucket::Nums_<ContainerAllocator> const> ConstPtr;

}; // struct Nums_

typedef ::bucket::Nums_<std::allocator<void> > Nums;

typedef boost::shared_ptr< ::bucket::Nums > NumsPtr;
typedef boost::shared_ptr< ::bucket::Nums const> NumsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bucket::Nums_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bucket::Nums_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace bucket

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'bucket': ['/home/gravl/leon_repo/test_ws/src/bucket/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::bucket::Nums_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bucket::Nums_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bucket::Nums_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bucket::Nums_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bucket::Nums_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bucket::Nums_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bucket::Nums_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b6d78ecf7b511642686f88da1fa1bdaf";
  }

  static const char* value(const ::bucket::Nums_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb6d78ecf7b511642ULL;
  static const uint64_t static_value2 = 0x686f88da1fa1bdafULL;
};

template<class ContainerAllocator>
struct DataType< ::bucket::Nums_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bucket/Nums";
  }

  static const char* value(const ::bucket::Nums_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bucket::Nums_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 num1\n\
uint32 num2\n\
uint32 num3\n\
uint32 num4\n\
";
  }

  static const char* value(const ::bucket::Nums_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bucket::Nums_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num1);
      stream.next(m.num2);
      stream.next(m.num3);
      stream.next(m.num4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Nums_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bucket::Nums_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bucket::Nums_<ContainerAllocator>& v)
  {
    s << indent << "num1: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num1);
    s << indent << "num2: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num2);
    s << indent << "num3: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num3);
    s << indent << "num4: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BUCKET_MESSAGE_NUMS_H
